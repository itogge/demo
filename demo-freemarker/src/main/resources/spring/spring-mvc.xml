<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:context="http://www.springframework.org/schema/context"  
       xmlns:mvc="http://www.springframework.org/schema/mvc"  
       xsi:schemaLocation="http://www.springframework.org/schema/beans 
       http://www.springframework.org/schema/beans/spring-beans.xsd    
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd  
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc.xsd">
        
	<!-- 本配置文件是工名为mvc-dispatcher的DispatcherServlet使用， 提供其相关的Spring MVC配置 -->
        
   <!-- 注意：FreeMarker与SpringMVC集成时，其配置一定要放在SpringMVC的配置之前 -->  
    <!-- 否则：在访问"/getUser"时服务器就会报告[HTTP Status 404 - /WEB-INF/jsp/myfree.jsp] -->  
    <bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">  
        <!-- 指定FreeMarker模板文件目录   -->
        <property name="templateLoaderPath" value="/"/>
        <property name="freemarkerSettings">
        	<props>
        		<!-- 设置标签类型 两种：[]和<>。[]这种标记解析要快些 -->
        		<prop key="tag_syntax">auto_detect</prop>
        		
        		<!-- 检查模板更新时间间隔，默认：5s -->
        		<prop key="template_update_delay">1</prop>
        		<prop key="defaultEncoding">UTF-8</prop>
        		<prop key="url_escaping_charset">UTF-8</prop>
        		<prop key="locale">zh_CN</prop>
        		
        		<!-- 格式化 -->
        		<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
        		<prop key="date_format">yyyy-MM-dd</prop>
        		<prop key="time_format">HH:mm:ss</prop>
        		<prop key="number_format">0.######</prop>
        		<prop key="boolean_format">yes,no</prop>
        		
        		<!-- 去掉多余的空格 -->
        		<prop key="whitespace_stripping">true</prop>
        		<prop key="auto_import">/WEB-INF/ftl/spring.ftl as s</prop>
        		
        	</props>
        </property>
        <property name="freemarkerVariables">
			<map>
				<entry key="suffix" value=".htm"/>
				<entry key="role" value-ref="roleDirectiveModel"/>
			</map>
		</property>
    </bean>
    <!-- freemarker另外一种配置方式，基于配置文件  -->
<!--     <bean id="freemarkerConfiguration" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:freemarker.properties" />    	
    </bean> -->
    
    <!-- 启用Spring基于annotation的DI, 使用户可以在Spring MVC中使用Spring的强大功能。 激活 @Required 
		@Autowired,JSR 250's @PostConstruct, @PreDestroy and @Resource 等标注 -->
<!-- <context:annotation-config /> -->
    
   <!-- DispatcherServlet上下文， 只管理@Controller类型的bean， 忽略其他型的bean, 如@Service -->
   <context:component-scan base-package="com.itogge.demofreemarker.controller"/>
   
   <!-- HandlerMapping, 无需配置， Spring MVC可以默认启动。DefaultAnnotationHandlerMapping annotation-driven HandlerMapping -->
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<property name="cacheSeconds" value="0" />
		<property name="messageConverters">
			<list>
				<ref bean="mappingJacksonHttpMessageConverter"/>
				<ref bean="mappingStringHttpMessageConverter" />
			</list>
		</property>
		<property name="webBindingInitializer" ref="webBindingInitializer" />
	</bean>
	<bean id="mappingStringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="mappingJacksonHttpMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<bean class="org.springframework.http.MediaType">
					<constructor-arg index="0" value="application" />
					<constructor-arg index="1" value="json" />
					<constructor-arg index="2" value="UTF-8" />
				</bean>
			</list>
		</property>
	</bean>
	<bean id="webBindingInitializer" class="org.springframework.web.bind.support.ConfigurableWebBindingInitializer">
		<property name="conversionService">
			<bean class="org.springframework.core.convert.support.DefaultConversionService" />
		</property>
	</bean>

	<!--开启springmvc注解模式 -->
	<!-- 1、自动注册DefaultAnnotationMapping、AnnotationHandlerAdapter 
	2、提供一系列：数据绑定，数字和日期的farmat @NumberFormat @DateTimeFormat 3、xml、json默认读写支持 -->
	<mvc:annotation-driven >
		<!-- 消息转换器 -->
		<mvc:message-converters register-defaults="true">
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<property name="supportedMediaTypes" value="text/html;charset=UTF-8"/>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
   
   <!--servlet-mapping 映射路径：/-->
    <!--静态资源默认servlet配置
    1、加入对静态的处理
    2、允许使用/做整体映射
    -->
<!--     <mvc:default-servlet-handler/> -->
    <!-- 静态资源处理， css， js， imgs -->
	<mvc:resources mapping="/media/**" location="/media/" />
	
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="favorParameter" value="false" />
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
				html=text/html
			</value>
		</property>
	</bean>
	
	<!-- 配置ViewResolver。 可以用多个ViewResolver。 使用order属性排序。 InternalResourceViewResolver放在最后。 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="order" value="1" />
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		
		<property name="viewResolvers">
			<list>
 				<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="order" value="2" />
					<property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/views/" />
					<property name="suffix" value=".jsp" />
				</bean>
				<!-- freemarker视图解析 -->
				<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
					<property name="order" value="0" />
					<property name="prefix" value="/WEB-INF/pages/" />
					<property name="suffix" value=".html" />
					<property name="contentType" value="text/html; charset=UTF-8" />
					<property name="exposeRequestAttributes" value="true" />
					<property name="exposeSessionAttributes" value="true" />
					<property name="exposeSpringMacroHelpers" value="true" />
					<property name="requestContextAttribute" value="request" />
					<property name="cache" value="true" />
				</bean>
				<!-- freemarker视图解析 -->
				<bean class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
					<property name="order" value="4" />
					<property name="prefix" value="/WEB-INF/ftl/" />
					<property name="suffix" value=".html" />
					<property name="contentType" value="text/html; charset=UTF-8" />
					<property name="exposeRequestAttributes" value="true" />
					<property name="exposeSessionAttributes" value="true" />
					<property name="exposeSpringMacroHelpers" value="true" />
					<property name="requestContextAttribute" value="request" />
					<property name="cache" value="true" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
			</list>
		</property>
	</bean>
    
    <!-- 访问"/getUserName"时服务器发现找不到/WEB-INF/ftl/username.ftl，于是它就到这里来找了，结果自然是找到了 -->  
<!--     <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">  
        <property name="prefix" value="/"/>  
        <property name="suffix" value=".html"/>  
    </bean> -->
    
    <!--200*1024*1024即200M resolveLazily属性启用是为了推迟文件解析，以便捕获文件大小异常 -->
  	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="209715200" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="resolveLazily" value="true" />
	</bean>
</beans>